# -*- coding: utf-8 -*-
"""K-Means Clustering Algorithm for Unsupervised Learning Tasks through Storytelling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XSSlqoLcjFjRaDTA0lmIa_1sb8hOUAE_
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# %matplotlib inline
sns.set_style('whitegrid')
plt.style.use('fivethirtyeight')


data = pd.read_csv('Collage-data.csv')
data.head()

data.info()

plt.figure(figsize=(10, 10))
sns.scatterplot(x='room_board', y='grad_rate', data=data, hue='private')

plt.figure(figsize=(10, 10))
sns.scatterplot(x='outstate', y='f_undergrad', data=data, hue='private')

plt.figure(figsize=(12, 8))

data.loc[data.private == 'Yes', 'outstate'].hist(label="Private College", bins=30)
data.loc[data.private == 'No', 'outstate'].hist(label="Non Private College", bins=30)

plt.xlabel('Outstate')
plt.legend()

plt.figure(figsize=(12, 8))

data.loc[data.private == 'Yes', 'grad_rate'].hist(label="Private College", bins=30)
data.loc[data.private == 'No', 'grad_rate'].hist(label="Non Private College", bins=30)

plt.xlabel('Graduation Rate')
plt.legend()

data.loc[data.grad_rate > 100]

data.loc[data.grad_rate > 100, 'grad_rate'] = 100
plt.figure(figsize=(12, 8))

data.loc[data.private == 'Yes', 'grad_rate'].hist(label="Private College", bins=30)
data.loc[data.private == 'No', 'grad_rate'].hist(label="Non Private College", bins=30)

plt.xlabel('Graduation Rate')
plt.legend()

from sklearn.cluster import KMeans

# Create an instance of a K Means model with 2 clusters
kmeans = KMeans(2)

# Fit the model to all the data except for the Private label
kmeans.fit(data.drop('private', axis=1))

KMeans(n_clusters=2)

kmeans.cluster_centers_

data['private'] = data.private.astype("category").cat.codes

from sklearn.metrics import classification_report, confusion_matrix

print(confusion_matrix(data.private, kmeans.labels_))
print(classification_report(data.private, kmeans.labels_))

from sklearn.metrics import accuracy_score

print(accuracy_score(data.private, kmeans.labels_))
print(pd.DataFrame(classification_report(data.private, kmeans.labels_, output_dict=True)))

from sklearn.preprocessing import StandardScaler

scalar = StandardScaler()

X = data.drop('private', axis=1)
y = data.private

X = scalar.fit_transform(X)

kmeans = KMeans(2)
kmeans.fit(X)

print(kmeans.cluster_centers_)

print(accuracy_score(y, kmeans.labels_))
print(confusion_matrix(y, kmeans.labels_))
print(classification_report(y, kmeans.labels_))

